صورت مسئله - ورژن اول اپ 
...
یک نرم افزار فست فودی داریم که میخواهیم صندوق این اپ را طراحی کنیم
...
نیاز فعلی اینکه سه مدل ساندویچ داریم
....
نوع اول : ساندویچ بزرگ با قیمت 300
نوع دوم : ساندویچ متوسط با قیمت 200
نوع سوم : ساندویچ کوچک با قیمت 100
...
در پیاده سازی من فقط سایز بستنی رو میگم و باید قیمت بستنی چاپ بشه
***
کامیت اول در گیت شامل پیاده سازی قسمت بالا میباشد
***

درصورت استفاده از 
enum 
برای هر تایپ ساندویچ ، این کار کاملا اشتباهه
...
ورژن اول به درستی کار میکند
...
اصل اول و دوم از 
solid
رعایت میشه
...
در صورت اضافه شدن سایز جدید از ساندویچ کد های قبلی دست نمیخوره 

...
صورت مسئله - ورژن دوم اپ
...
ساندویچ می تواند همراه با سس باشد 
در صورت انتخاب سس باید بیست درصد به قیمت ساندویچ اضافه شود

***
با به ازای یه قابلیت جدید به سیتیم مجبور شدیم سه کلاس جدید ایجاد کنیم
یعنی در ورژن سوم که قرار است ساندویچ شامل سیب زمینی هم باشد 
ما باید به ازاری هر سایز ساندویچ 4 کلاس اضافه کنیم
یک : ساندویچ ساده
دو : ساندویچ با سس
سه : ساندویچ با سیب زمینی
چهار :ساندویچ با سیب زمینی و سس

حالا به این فک کنیم در ورين بعدی نوشابه هم اضافه بشه 
با این روش کلاس پشت کلاس باید بسازیم و همینطور به مرور زمان بزرگ و بزرگ تر میشه
***

اما راه حل استفاده از
decorator

یه نغییر کوچیک در کلاس اصلی ساندویچ میدیم برای اینکه مثال راحت تر جا بیوفته

***
حال بعد از پیاده سازی 
decorator
دیگ به ازای هر تایپ جدید در ساندویچ فقط کافیه به ازای اون تایپ یک کلاس بسازیم و دکوریت کنیم
...
هدف از 
decorator
افزودن عملکرد داینامیک
 .ترکیب به جای ارث بری
 رعایت اصل OCP
